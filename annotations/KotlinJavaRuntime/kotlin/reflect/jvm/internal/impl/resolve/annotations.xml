<root>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorFactory kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor createEnumValueOfMethod(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.MemberComparator int compare(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils boolean isLocal(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils boolean isEnumEntry(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil void generateOverridesInFunctionGroup(kotlin.reflect.jvm.internal.impl.name.Name, java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor&gt;, java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor&gt;, kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor, kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.DescriptorSink) 4'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils boolean areInSameModule(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.OverrideCompatibilityInfo.Result INCOMPATIBLE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils java.util.Set&lt;kotlin.reflect.jvm.internal.impl.name.FqName&gt; getPackagesFqNames(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils java.util.Set&lt;D&gt; getAllOverriddenDeclarations(D)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.OverrideCompatibilityInfo isOverridableBy(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe getFqName(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.VisibilityUtil kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor findMemberWithMaxVisibility(java.util.Queue&lt;kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.OverrideCompatibilityInfo kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.OverrideCompatibilityInfo typeParameterNumberMismatch()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils boolean shouldRecordInitializerForProperty(kotlin.reflect.jvm.internal.impl.descriptors.VariableDescriptor, kotlin.reflect.jvm.internal.impl.types.JetType) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorFactory kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyGetterDescriptorImpl createGetter(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor, boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getClassDescriptorForTypeConstructor(kotlin.reflect.jvm.internal.impl.types.TypeConstructor)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorFactory kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertySetterDescriptorImpl createDefaultSetter(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getInnerClassByName(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil void generateOverridesInFunctionGroup(kotlin.reflect.jvm.internal.impl.name.Name, java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor&gt;, java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor&gt;, kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor, kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.DescriptorSink) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorFactory kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor createEnumValuesMethod(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils boolean areInSameModule(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils boolean classCanHaveAbstractMembers(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils kotlin.reflect.jvm.internal.impl.resolve.scopes.JetScope getStaticNestedClassesScope(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getClassDescriptorForTypeConstructor(kotlin.reflect.jvm.internal.impl.types.TypeConstructor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils kotlin.reflect.jvm.internal.impl.resolve.scopes.JetScope getStaticNestedClassesScope(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils boolean isOverride(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils java.util.Set&lt;kotlin.reflect.jvm.internal.impl.name.FqName&gt; getSubPackagesFqNames(kotlin.reflect.jvm.internal.impl.descriptors.PackageViewDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils boolean isAncestor(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, boolean) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil void bindOverride(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils boolean isObject(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.OverrideCompatibilityInfo kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.OverrideCompatibilityInfo memberKindMismatch()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil DEFAULT'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils boolean isStaticNestedClass(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorFactory kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor createEnumValuesMethod(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorFactory kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyGetterDescriptorImpl createGetter(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor getContainingModule(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils boolean shouldRecordInitializerForProperty(kotlin.reflect.jvm.internal.impl.descriptors.VariableDescriptor, kotlin.reflect.jvm.internal.impl.types.JetType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils boolean isAnonymousObject(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.OverrideCompatibilityInfo kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.OverrideCompatibilityInfo varOverriddenByVal()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorFactory kotlin.reflect.jvm.internal.impl.descriptors.impl.ConstructorDescriptorImpl createPrimaryConstructorForObject(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils boolean classCanHaveOpenMembers(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils boolean canHaveDeclaredConstructors(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils kotlin.reflect.jvm.internal.impl.name.FqName getFqNameSafe(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getInnerClassByName(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils java.util.Set&lt;kotlin.reflect.jvm.internal.impl.name.FqName&gt; getPackagesFqNames(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils java.util.Set&lt;kotlin.reflect.jvm.internal.impl.name.FqName&gt; getSubPackagesFqNames(kotlin.reflect.jvm.internal.impl.descriptors.PackageViewDescriptor)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorFactory kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertySetterDescriptorImpl createSetter(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor, boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils D getParentOfType(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, java.lang.Class&lt;D&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil void generateOverridesInFunctionGroup(kotlin.reflect.jvm.internal.impl.name.Name, java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor&gt;, java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor&gt;, kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor, kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.DescriptorSink) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.ImportPath ImportPath(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils kotlin.reflect.jvm.internal.impl.types.JetType getSuperClassType(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils ENUM_VALUES'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.OverrideCompatibilityInfo isOverridableByIncludingReturnType(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition boolean isOverridable(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils boolean isSingletonOrAnonymousObject(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.OverrideCompatibilityInfo kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.OverrideCompatibilityInfo nameMismatch()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe getFqName(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.VisibilityUtil kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor findMemberWithMaxVisibility(java.util.Queue&lt;kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.MemberComparator INSTANCE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.MemberComparator int compare(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getClassDescriptorForType(kotlin.reflect.jvm.internal.impl.types.JetType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorFactory kotlin.reflect.jvm.internal.impl.descriptors.impl.ConstructorDescriptorImpl createPrimaryConstructorForObject(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils java.util.Set&lt;D&gt; getAllOverriddenDeclarations(D) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorFactory boolean isDefaultPrimaryConstructor(kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil void generateOverridesInFunctionGroup(kotlin.reflect.jvm.internal.impl.name.Name, java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor&gt;, java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor&gt;, kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor, kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.DescriptorSink) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils boolean isExtension(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.OverrideCompatibilityInfo isOverridableByIncludingReturnType(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition boolean isOverridable(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils boolean containsReifiedTypeParameterWithName(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils boolean isSubclass(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorFactory kotlin.reflect.jvm.internal.impl.descriptors.impl.ConstructorDescriptorImpl createPrimaryConstructorForObject(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.SourceElement)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.OverrideCompatibilityInfo isOverridableBy(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorFactory kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyGetterDescriptorImpl createDefaultGetter(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorFactory kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertySetterDescriptorImpl createSetter(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.OverrideCompatibilityInfo.Result OVERRIDABLE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.OverrideCompatibilityInfo kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.OverrideCompatibilityInfo receiverPresenceMismatch()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.OverrideCompatibilityInfo kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.OverrideCompatibilityInfo externalConditionFailed(java.lang.Class&lt;? extends kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.DescriptorSink void conflict(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil void generateOverridesInFunctionGroup(kotlin.reflect.jvm.internal.impl.name.Name, java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor&gt;, java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor&gt;, kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor, kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.DescriptorSink) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils boolean isJavaLangClass(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil void resolveUnknownVisibilityForMember(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor, kotlin.jvm.functions.Function1&lt;kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor,kotlin.Unit&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getClassDescriptorForType(kotlin.reflect.jvm.internal.impl.types.JetType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils kotlin.reflect.jvm.internal.impl.name.FqName getFqNameSafe(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils boolean containsReifiedTypeParameters(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils boolean isStaticDeclaration(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorFactory kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor createExtensionReceiverParameterForCallable(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor, kotlin.reflect.jvm.internal.impl.types.JetType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils boolean isSubclass(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils D unwrapFakeOverride(D) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils boolean containsReifiedTypeParameterWithName(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.ImportPath ImportPath(kotlin.reflect.jvm.internal.impl.name.FqName, boolean, kotlin.reflect.jvm.internal.impl.name.Name) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils kotlin.reflect.jvm.internal.impl.types.JetType getSuperClassType(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.OverrideCompatibilityInfo isOverridableByIncludingReturnType(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils ENUM_VALUE_OF'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil createWithEqualityAxioms(kotlin.reflect.jvm.internal.impl.types.checker.JetTypeChecker.TypeConstructorEquality) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils boolean isTopLevelOrInnerClass(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils D getParentOfType(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, java.lang.Class&lt;D&gt;, boolean) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils java.util.Set&lt;D&gt; getAllOverriddenDescriptors(D) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.OverrideCompatibilityInfo kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.OverrideCompatibilityInfo success()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor getContainingModule(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.DescriptorSink void conflict(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.ImportPath kotlin.reflect.jvm.internal.impl.name.FqName fqnPart()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.MemberComparator int compare(java.lang.Object, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.OverrideCompatibilityInfo kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.OverrideCompatibilityInfo valueParameterNumberMismatch()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils java.util.Set&lt;D&gt; getAllOverriddenDescriptors(D)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.OverrideCompatibilityInfo kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.OverrideCompatibilityInfo boundsMismatch(kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorFactory kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertySetterDescriptorImpl createDefaultSetter(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.OverrideCompatibilityInfo.Result CONFLICT'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.DescriptorSink void addToScope(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.OverrideCompatibilityInfo kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.OverrideCompatibilityInfo externalConditionFailed(java.lang.Class&lt;? extends kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils kotlin.reflect.jvm.internal.impl.descriptors.Visibility getDefaultConstructorVisibility(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils kotlin.reflect.jvm.internal.impl.descriptors.Visibility getDefaultConstructorVisibility(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.ImportPath ImportPath(kotlin.reflect.jvm.internal.impl.name.FqName, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil boolean traverseOverridenDescriptors(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor, kotlin.jvm.functions.Function1&lt;kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils boolean isTopLevelDeclaration(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils boolean isNonCompanionObject(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorFactory kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyGetterDescriptorImpl createDefaultGetter(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil void bindOverride(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.MemberComparator int compare(java.lang.Object, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils D unwrapFakeOverride(D)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil createWithEqualityAxioms(kotlin.reflect.jvm.internal.impl.types.checker.JetTypeChecker.TypeConstructorEquality)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.OverrideCompatibilityInfo kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.OverrideCompatibilityInfo returnTypeMismatch(kotlin.reflect.jvm.internal.impl.types.JetType, kotlin.reflect.jvm.internal.impl.types.JetType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils java.util.List&lt;kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor&gt; getSuperclassDescriptors(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor getContainingModuleOrNull(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil boolean traverseOverridenDescriptors(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor, kotlin.jvm.functions.Function1&lt;kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorFactory kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor createEnumValueOfMethod(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils java.util.List&lt;kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor&gt; getSuperclassDescriptors(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.OverrideCompatibilityInfo kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.OverrideCompatibilityInfo valueParameterTypeMismatch(kotlin.reflect.jvm.internal.impl.types.JetType, kotlin.reflect.jvm.internal.impl.types.JetType, kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.OverrideCompatibilityInfo.Result)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil java.util.List&lt;? extends kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor&gt; getTopmostOverridenDescriptors(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils kotlin.reflect.jvm.internal.impl.name.FqName getFqNameFromTopLevelClass(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils kotlin.reflect.jvm.internal.impl.name.FqName getFqNameFromTopLevelClass(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil.OverrideCompatibilityInfo isOverridableBy(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor getDispatchReceiverParameterIfNeeded(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil java.util.List&lt;? extends kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor&gt; getTopmostOverridenDescriptors(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getContainingClass(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
</root>
